create table
  public.cart_items (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    listing_id bigint not null,
    cart_id bigint not null,
    quantity integer not null,
    constraint cart_items_pkey primary key (id),
    constraint cart_items_cart_id_fkey foreign key (cart_id) references carts (cart_id),
    constraint cart_items_listing_id_fkey foreign key (listing_id) references listings (listing_id)
  ) tablespace pg_default;

create table
  public.carts (
    cart_id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    user_id bigint not null,
    active boolean not null,
    constraint carts_pkey primary key (cart_id),
    constraint carts_user_id_fkey foreign key (user_id) references users (user_id)
  ) tablespace pg_default;

create table
  public.listings (
    listing_id bigint generated by default as identity,
    shop_id bigint not null,
    shoe_id bigint not null,
    price bigint not null,
    created_at timestamp with time zone not null default now(),
    size integer not null,
    transaction_id bigint not null,
    condition text not null,
    age / gender text not null,
    constraint test - listings_pkey primary key (listing_id),
    constraint listings_shoe_id_fkey foreign key (shoe_id) references shoes (shoe_id),
    constraint listings_shop_id_fkey foreign key (shop_id) references shops (shop_id),
    constraint listings_transaction_id_fkey foreign key (transaction_id) references transactions (id)
  ) tablespace pg_default;


create table
  public.shoe_inventory_ledger (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    quantity integer not null,
    shop_id bigint not null,
    listing_id bigint not null,
    transaction_id bigint not null,
    constraint shoe_inventory_ledger_pkey primary key (id),
    constraint shoe_inventory_ledger_listing_id_fkey foreign key (listing_id) references listings (listing_id),
    constraint shoe_inventory_ledger_shop_id_fkey foreign key (shop_id) references shops (shop_id),
    constraint shoe_inventory_ledger_transaction_id_fkey foreign key (transaction_id) references transactions (id)
  ) tablespace pg_default;

create table
  public.shoes (
    shoe_id bigint generated by default as identity,
    brand text not null,
    color text not null,
    style text not null,
    created_at timestamp with time zone not null default now(),
    transaction_id bigint not null,
    constraint test - shoes_pkey primary key (shoe_id),
    constraint shoes_transaction_id_fkey foreign key (transaction_id) references transactions (id)
    constraint unique_brand_color_style unique(brand, color, style)
  ) tablespace pg_default;

create table
  public.shop_balance_ledger (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    balance bigint not null,
    shop_id bigint not null,
    constraint shop_balance_ledger_pkey primary key (id),
    constraint shop_balance_ledger_shop_id_fkey foreign key (shop_id) references shops (shop_id)
  ) tablespace pg_default;

create table
  public.shop_rating_ledger (
    rating_id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    shop_id bigint not null,
    rating smallint not null,
    user_id bigint not null,
    constraint shop_rating_ledger_pkey primary key (rating_id),
    constraint shop_rating_ledger_shop_id_fkey foreign key (shop_id) references shops (shop_id),
    constraint shop_rating_ledger_user_id_fkey foreign key (user_id) references users (user_id),
    constraint shop_rating_ledger_rating_check check (
      (
        (1 <= rating)
        and (rating <= 5)
      )
    )
  ) tablespace pg_default;

create table
  public.shops (
    shop_id bigint generated by default as identity,
    user_id bigint not null,
    store_name text not null,
    created_at timestamp with time zone not null default now(),
    verified boolean not null default false,
    discount_counter integer not null default 0,
    sale_start timestamp with time zone not null default now(),
    price_percentage integer not null default 100,
    promotion_tier integer not null default 0,
    constraint shops_pkey primary key (shop_id),
    constraint shops_seller_id_key unique (user_id),
    constraint shops_shop_id_key unique (shop_id),
    constraint shops_store_name_key unique (store_name),
    constraint shops_user_id_fkey foreign key (user_id) references users (user_id),
    constraint shops_price_percentage_check check ((price_percentage <= 100))
  ) tablespace pg_default;

create table
  public.transactions (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    description text null,
    tag text not null,
    constraint transactions_pkey primary key (id)
  ) tablespace pg_default;

create table
  public.users (
    user_id bigint generated by default as identity,
    name text not null,
    email text not null,
    password text not null,
    created_at timestamp with time zone not null default now(),
    constraint users_pkey primary key (user_id),
    constraint users_email_key unique (email)
  ) tablespace pg_default;

-- insert statements for initial population
-- only hallie and mio with listings
-- shoes: nike dunks, nike jordans, converse chucks
-- 5 total listings: 2 hallie, 3 mio

shoe_id1 = INSERT INTO shoes (brand, color, style) VALUES ("Nike", "Blue", "Dunk Lows") RETURNING shoe_id
shoe_id2 = INSERT INTO shoes (brand, color, style) VALUES ("Nike", "Red", "Jordans") RETURNING shoe_id
shoe_id3 = INSERT INTO shoes (brand, color, style) VALUES ("Converse", "Yellow", "Chuck Taylor High Tops") RETURNING shoe_id

transaction_id1 = INSERT INTO transactions (description, tag) VALUES ("shoe uploaded: Blue,  Nike, Dunk Lows", "LISTING") RETURNING id
transaction_id2 = INSERT INTO transactions (description, tag) VALUES ("shoe uploaded: Blue,  Nike, Dunk Lows", "LISTING") RETURNING id
transaction_id3 = INSERT INTO transactions (description, tag) VALUES ("shoe uploaded: Red,  Nike, Jordans", "LISTING") RETURNING id
transaction_id4 = INSERT INTO transactions (description, tag) VALUES ("shoe uploaded: Blue,  Nike, Dunk Lows", "LISTING") RETURNING id
transaction_id5 = INSERT INTO transactions (description, tag) VALUES ("shoe uploaded: Yellow,  Converse, Chuck Taylor High Tops", "LISTING") RETURNING id

user_id = INSERT INTO users (name, email, password) VALUES ("Hallie", "hallie@gmail.com", "scooter1") RETURNING user_id
shop_id = INSERT INTO shops (store_name, user_id, verified) VALUES ("scooter shoes", user_id, FALSE) RETURNING shop_id
listing_id = INSERT INTO listings (shop_id, shoe_id, price, size, transaction_id) VALUES (shop_id, shoe_id1, 450, 6, transaction_id1)
INSERT INTO shoe_inventory_ledger (shop_id, listing_id, transaction_id, quantity) VALUES (shop_id, listing_id, transaction_id1, 1)
listing_id = INSERT INTO listings (shop_id, shoe_id, price, size, transaction_id) VALUES (shop_id, shoe_id1, 450, 7, transaction_id2)
INSERT INTO shoe_inventory_ledger (shop_id, listing_id, transaction_id, quantity) VALUES (shop_id, listing_id, transaction_id2, 1)


user_id = INSERT INTO users (name, email, password) VALUES ("Felicia", "felicia@gmail.com", "scooter2") RETURNING user_id

user_id = INSERT INTO users (name, email, password) VALUES ("Mio", "mio@gmail.com", "scooter3") RETURNING user_id
shop_id = INSERT INTO shops (store_name, user_id, verified) VALUES ("scooter shoes", user_id, FALSE) RETURNING shop_id
listing_id = INSERT INTO listings (shop_id, shoe_id, price, size, transaction_id) VALUES (shop_id, shoe_id2, 550, 8, transaction_id3)
INSERT INTO shoe_inventory_ledger (shop_id, listing_id, transaction_id, quantity) VALUES (shop_id, listing_id, transaction_id3, 1)
listing_id = INSERT INTO listings (shop_id, shoe_id, price, size, transaction_id) VALUES (shop_id, shoe_id1, 350, 7, transaction_id4)
INSERT INTO shoe_inventory_ledger (shop_id, listing_id, transaction_id, quantity) VALUES (shop_id, listing_id, transaction_id4, 1)
listing_id = INSERT INTO listings (shop_id, shoe_id, price, size, transaction_id) VALUES (shop_id, shoe_id3, 90, 7, transaction_id5)
INSERT INTO shoe_inventory_ledger (shop_id, listing_id, transaction_id, quantity) VALUES (shop_id, listing_id, transaction_id5, 1)

user_id = INSERT INTO users (name, email, password) VALUES ("Xander", "xander@gmail.com", "scooter4") RETURNING user_id
  -- insert shops for mio and hallie
  -- insert listings
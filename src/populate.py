import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np

def database_connection_url():
    dotenv.load_dotenv()


    # DB_USER = os.environ.get("POSTGRES_USER", "postgres")
    # DB_PASSWD = os.environ.get("POSTGRES_PASSWORD", "postgres")
    # DB_SERVER = os.environ.get("POSTGRES_SERVER", "127.0.0.1")
    # DB_PORT = os.environ.get("POSTGRES_PORT", 54322)
    # DB_NAME = os.environ.get("POSTGRES_DB", "postgres")
    return os.environ.get("POSTGRES_URI")
    #return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
   
    DROP TABLE IF EXISTS users CASCADE;
    DROP TABLE IF EXISTS carts CASCADE;
    DROP TABLE IF EXISTS cart_items CASCADE;
    DROP TABLE IF EXISTS shoes CASCADE;                             
    DROP TABLE IF EXISTS listings CASCADE; 
    DROP TABLE IF EXISTS shoe_inventory_ledger CASCADE;
    DROP TABLE IF EXISTS shops CASCADE;
    DROP TABLE IF EXISTS shop_balance_ledger CASCADE;
    DROP TABLE IF EXISTS transactions CASCADE;

    create table
    public.users (
        user_id bigint generated by default as identity,
        name text not null,
        email text not null,
        password text not null,
        created_at timestamp with time zone not null default now(),
        constraint users_pkey primary key (user_id),
        constraint users_email_key unique (email),
        constraint users_password_key unique (password)
    ) tablespace pg_default;

    create table
    public.shops (
        shop_id bigint generated by default as identity,
        user_id bigint not null,
        store_name text not null,
        created_at timestamp with time zone not null default now(),
        verified boolean not null default false,
        discount_counter integer not null default 0,
        sale_start timestamp with time zone not null default now(),
        price_percentage integer not null default 100,
        promotion_tier integer not null default 0,
        constraint shops_pkey primary key (shop_id),
        constraint shops_seller_id_key unique (user_id),
        constraint shops_shop_id_key unique (shop_id),
        constraint shops_store_name_key unique (store_name),
        constraint shops_price_percentage_check check ((price_percentage <= 100))
    ) tablespace pg_default; 

    create table
    public.transactions (
        id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        description text null,
        tag text not null,
        constraint transactions_pkey primary key (id)
    ) tablespace pg_default;
                                 
    create table
    public.shoes (
        shoe_id bigint generated by default as identity,
        brand text not null,
        color text not null,
        style text not null,
        created_at timestamp with time zone not null default now(),
        transaction_id bigint not null,
        primary key (shoe_id),
        constraint unique_brand_color_style unique (brand, color, style),
        constraint shoes_transaction_id_fkey foreign key (transaction_id) references transactions (id)
    ) tablespace pg_default;
                                 
    create table
    public.listings (
        listing_id bigint generated by default as identity,
        shop_id bigint not null,
        shoe_id bigint not null,
        price bigint not null,
        created_at timestamp with time zone not null default now(),
        size integer not null,
        transaction_id bigint not null,
        condition text not null,
        gender text not null,
        constraint listings_pkey primary key (listing_id),
        constraint listings_shoe_id_fkey foreign key (shoe_id) references shoes (shoe_id),
        constraint listings_shop_id_fkey foreign key (shop_id) references shops (shop_id),
        constraint listings_transaction_id_fkey foreign key (transaction_id) references transactions (id)
    ) tablespace pg_default;

    create table
    public.shoe_inventory_ledger (
        id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        quantity integer not null,
        shop_id bigint not null,
        listing_id bigint not null,
        transaction_id bigint not null,
        constraint shoe_inventory_ledger_pkey primary key (id),
        constraint shoe_inventory_ledger_listing_id_fkey foreign key (listing_id) references listings (listing_id),
        constraint shoe_inventory_ledger_shop_id_fkey foreign key (shop_id) references shops (shop_id),
        constraint shoe_inventory_ledger_transaction_id_fkey foreign key (transaction_id) references transactions (id)
    ) tablespace pg_default;

    create table
    public.shop_balance_ledger (
        id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        balance bigint not null,
        shop_id bigint not null,
        constraint shop_balance_ledger_pkey primary key (id),
        constraint shop_balance_ledger_shop_id_fkey foreign key (shop_id) references shops (shop_id)
    ) tablespace pg_default;                                                                                      

    create table
    public.carts (
        cart_id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        user_id bigint not null,
        active boolean not null,
        constraint carts_pkey primary key (cart_id),
        constraint carts_user_id_fkey foreign key (user_id) references users (user_id)
    ) tablespace pg_default;
                                 
    create table
    public.cart_items (
        id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        listing_id bigint not null,
        cart_id bigint not null,
        quantity integer not null,
        constraint cart_items_pkey primary key (id)
    ) tablespace pg_default;                            
                                 
    """))
    
    # populate initial posting categories
    # for category in categories:    
    #     conn.execute(sqlalchemy.text("""
    #     INSERT INTO category (category_name) VALUES (:category_name);
    #     """), {"category_name": category})

# num_users = 10
# fake = Faker()
# posts_sample_distribution = np.random.default_rng().negative_binomial(0.04, 0.01, num_users)
# category_sample_distribution = np.random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
#                                                  num_users,
#                                                 p=[0.1, 0.05, 0.1, 0.3, 0.05, 0.05, 0.05, 0.05, 0.15, 0.1])
# total_posts = 0

# create fake posters with fake names and birthdays
fake = Faker()
with engine.begin() as conn:
    print("creating fake users...")
    posts = []
    for i in range(10000):
        #if (i % 10 == 0):
            #print(i)
        
        name = fake.first_name()
        email = fake.unique.email()
        password = fake.unique.password(length=5)
        #device_type = fake.random_element(elements=('Android', 'iOS', 'Web'))
        

        poster_id = conn.execute(sqlalchemy.text(
            """
            INSERT INTO users (name, email, password) 
            VALUES (:name, :email, :password) RETURNING user_id;
            """
        ), {"name": name, "email": email, "password": password }).scalar_one();

    #     num_posts = posts_sample_distribution[i]
    #     likes_sample_distribution = np.random.default_rng().negative_binomial(0.8, 0.0001, num_posts)  
    #     for j in range(num_posts):
    #         total_posts += 1
    #         posts.append({
    #             "title": fake.sentence(),
    #             "content": fake.text(),
    #             "poster_id": poster_id,
    #             "category_id": category_sample_distribution[i].item(),
    #             "visible": fake.boolean(75),
    #             "created_at": fake.date_time_between(start_date='-5y', end_date='now', tzinfo=None),
    #             "likes": likes_sample_distribution[j].item(),
    #             "nsfw": fake.boolean(10)
    #         })

    # if posts:
    #     conn.execute(sqlalchemy.text("""
    #     INSERT INTO posts (title, content, poster_id, category_id, visible, created_at) 
    #     VALUES (:title, :content, :poster_id, :category_id, :visible, :created_at);
    #     """), posts)

    # print("total posts: ", total_posts)

